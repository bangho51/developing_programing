
interrupt_ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000025e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800112  00800112  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8f  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009be  00000000  00000000  00000f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050b  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004af  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000279  00000000  00000000  000023a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000261c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2b d0       	rcall	.+86     	; 0x11a <main>
  c4:	ca c0       	rjmp	.+404    	; 0x25a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_PE4>:
unsigned char counted = NO;

/* PE4 : 스위치 입력 */
void init_PE4(void)
{
	DDRE &= ~(1 << PE4); // PE4만 0으로 만듦 [PE4 : input]
  c8:	82 b1       	in	r24, 0x02	; 2
  ca:	8f 7e       	andi	r24, 0xEF	; 239
  cc:	82 b9       	out	0x02, r24	; 2
  ce:	08 95       	ret

000000d0 <check_PE4>:
}
void check_PE4(void)
{
	if((PINE & (1<<PE4)) == 0) // PE4가 Low(0)이면 버튼이 눌린 상태
  d0:	0c 99       	sbic	0x01, 4	; 1
  d2:	20 c0       	rjmp	.+64     	; 0x114 <check_PE4+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9c e9       	ldi	r25, 0x9C	; 156
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <check_PE4+0x8>
  dc:	00 c0       	rjmp	.+0      	; 0xde <check_PE4+0xe>
  de:	00 00       	nop
	{
		_delay_ms(10); // 디바운싱
		if(((PINE & (1<<PE4)) == 0) && counted == NO) // PE4가 Low(0)이면 버튼이 눌린 상태
  e0:	0c 99       	sbic	0x01, 4	; 1
  e2:	1a c0       	rjmp	.+52     	; 0x118 <check_PE4+0x48>
  e4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  e8:	81 11       	cpse	r24, r1
  ea:	16 c0       	rjmp	.+44     	; 0x118 <check_PE4+0x48>
		{
			count++;
  ec:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <count>
  f0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <count+0x1>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <count+0x1>
  fa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <count>
			if(count > 9999) count = 0;
  fe:	80 31       	cpi	r24, 0x10	; 16
 100:	97 42       	sbci	r25, 0x27	; 39
 102:	20 f0       	brcs	.+8      	; 0x10c <check_PE4+0x3c>
 104:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count+0x1>
 108:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <count>
			counted = YES;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 112:	08 95       	ret
		}
	}
	else
			counted = NO;
 114:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 118:	08 95       	ret

0000011a <main>:
}
int main(void)
{
	init_PE4();
 11a:	d6 df       	rcall	.-84     	; 0xc8 <init_PE4>
	init_fnd();
 11c:	07 d0       	rcall	.+14     	; 0x12c <init_fnd>
	while (1)
	{
		check_PE4();
 11e:	d8 df       	rcall	.-80     	; 0xd0 <check_PE4>
 120:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <count>
		fnd_number(count);
 124:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <count+0x1>
 128:	36 d0       	rcall	.+108    	; 0x196 <fnd_number>
 12a:	f9 cf       	rjmp	.-14     	; 0x11e <main+0x4>

0000012c <init_fnd>:
unsigned char fnd_digit[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71}; // common cathode FND 0-F
unsigned char fnd_minus = 0x40;
unsigned char fnd_dp = 0x80;
void init_fnd(void)
{
	DDRC = 0xff; // PC 출력 fnd display, 1:ON, 0:OFF
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	84 bb       	out	0x14, r24	; 20
	DDRG = 0x0f; // 4개의 fnd 중, 1:선택, 0:선택 안함
 130:	8f e0       	ldi	r24, 0x0F	; 15
 132:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTC = 0; // fnd 모두 꺼짐
 136:	15 ba       	out	0x15, r1	; 21
	PORTG = 0; // fnd 선택 없음
 138:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 13c:	08 95       	ret

0000013e <fnd>:
}

void fnd(int ith, int digit)
{
	PORTG = 1 << ith; // fnd 선택
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <fnd+0xa>
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	8a 95       	dec	r24
 14a:	e2 f7       	brpl	.-8      	; 0x144 <fnd+0x6>
 14c:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	if(digit >= 0 && digit < 16) PORTC = fnd_digit[digit]; // 16진수 표시
 150:	60 31       	cpi	r22, 0x10	; 16
 152:	71 05       	cpc	r23, r1
 154:	30 f4       	brcc	.+12     	; 0x162 <fnd+0x24>
 156:	fb 01       	movw	r30, r22
 158:	ef 5f       	subi	r30, 0xFF	; 255
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	80 81       	ld	r24, Z
 15e:	85 bb       	out	0x15, r24	; 21
 160:	03 c0       	rjmp	.+6      	; 0x168 <fnd+0x2a>
	else PORTC = fnd_minus;
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	85 bb       	out	0x15, r24	; 21
 168:	8f e3       	ldi	r24, 0x3F	; 63
 16a:	9f e1       	ldi	r25, 0x1F	; 31
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <fnd+0x2e>
 170:	00 c0       	rjmp	.+0      	; 0x172 <fnd+0x34>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <fnd_overflow>:
	_delay_ms(FND_DELAY);
}

void fnd_overflow(void) // 표현 불가 표시하기
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	int i;
	for(i=0; i<4; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	05 c0       	rjmp	.+10     	; 0x18a <fnd_overflow+0x14>
	fnd(i, -1);
 180:	6f ef       	ldi	r22, 0xFF	; 255
 182:	7f ef       	ldi	r23, 0xFF	; 255
 184:	ce 01       	movw	r24, r28
 186:	db df       	rcall	.-74     	; 0x13e <fnd>
}

void fnd_overflow(void) // 표현 불가 표시하기
{
	int i;
	for(i=0; i<4; i++)
 188:	21 96       	adiw	r28, 0x01	; 1
 18a:	c4 30       	cpi	r28, 0x04	; 4
 18c:	d1 05       	cpc	r29, r1
 18e:	c4 f3       	brlt	.-16     	; 0x180 <fnd_overflow+0xa>
	fnd(i, -1);
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <fnd_number>:

void fnd_number(int number)
{
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	7c 01       	movw	r14, r24
	int abs_number, n, i;
	if(number < -999 || number > 9999)
 1a4:	89 51       	subi	r24, 0x19	; 25
 1a6:	9c 4f       	sbci	r25, 0xFC	; 252
 1a8:	87 3f       	cpi	r24, 0xF7	; 247
 1aa:	9a 42       	sbci	r25, 0x2A	; 42
 1ac:	10 f0       	brcs	.+4      	; 0x1b2 <fnd_number+0x1c>
	{
		fnd_overflow(); // 숫자 표현 범위를 넘어감
 1ae:	e3 df       	rcall	.-58     	; 0x176 <fnd_overflow>
 1b0:	26 c0       	rjmp	.+76     	; 0x1fe <fnd_number+0x68>
	}
	else
	{
		abs_number = absolute(number);
 1b2:	e7 01       	movw	r28, r14
 1b4:	ff 20       	and	r15, r15
 1b6:	24 f4       	brge	.+8      	; 0x1c0 <fnd_number+0x2a>
 1b8:	cc 27       	eor	r28, r28
 1ba:	dd 27       	eor	r29, r29
 1bc:	ce 19       	sub	r28, r14
 1be:	df 09       	sbc	r29, r15
		for(i=0; i<4; i++)
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	11 c0       	rjmp	.+34     	; 0x1e8 <fnd_number+0x52>
		{
			n = abs_number % 10; // 10으로 나눈 나머지 수
 1c6:	ce 01       	movw	r24, r28
 1c8:	6a e0       	ldi	r22, 0x0A	; 10
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	1f d0       	rcall	.+62     	; 0x20c <__divmodhi4>
			fnd(i, n);
 1ce:	bc 01       	movw	r22, r24
 1d0:	c8 01       	movw	r24, r16
 1d2:	b5 df       	rcall	.-150    	; 0x13e <fnd>
			if(abs_number >= 10) abs_number /= 10; // 10으로 나누어 다음 자리 수로 이동
 1d4:	ca 30       	cpi	r28, 0x0A	; 10
 1d6:	d1 05       	cpc	r29, r1
 1d8:	54 f0       	brlt	.+20     	; 0x1ee <fnd_number+0x58>
 1da:	ce 01       	movw	r24, r28
 1dc:	6a e0       	ldi	r22, 0x0A	; 10
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	15 d0       	rcall	.+42     	; 0x20c <__divmodhi4>
 1e2:	eb 01       	movw	r28, r22
		fnd_overflow(); // 숫자 표현 범위를 넘어감
	}
	else
	{
		abs_number = absolute(number);
		for(i=0; i<4; i++)
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	04 30       	cpi	r16, 0x04	; 4
 1ea:	11 05       	cpc	r17, r1
 1ec:	64 f3       	brlt	.-40     	; 0x1c6 <fnd_number+0x30>
			n = abs_number % 10; // 10으로 나눈 나머지 수
			fnd(i, n);
			if(abs_number >= 10) abs_number /= 10; // 10으로 나누어 다음 자리 수로 이동
			else break;
		}
		if(number < 0) fnd(i+1, fnd_minus); // 음수 부호
 1ee:	ff 20       	and	r15, r15
 1f0:	34 f4       	brge	.+12     	; 0x1fe <fnd_number+0x68>
 1f2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	c8 01       	movw	r24, r16
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	a0 df       	rcall	.-192    	; 0x13e <fnd>
	}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	08 95       	ret

0000020c <__divmodhi4>:
 20c:	97 fb       	bst	r25, 7
 20e:	07 2e       	mov	r0, r23
 210:	16 f4       	brtc	.+4      	; 0x216 <__divmodhi4+0xa>
 212:	00 94       	com	r0
 214:	06 d0       	rcall	.+12     	; 0x222 <__divmodhi4_neg1>
 216:	77 fd       	sbrc	r23, 7
 218:	08 d0       	rcall	.+16     	; 0x22a <__divmodhi4_neg2>
 21a:	0b d0       	rcall	.+22     	; 0x232 <__udivmodhi4>
 21c:	07 fc       	sbrc	r0, 7
 21e:	05 d0       	rcall	.+10     	; 0x22a <__divmodhi4_neg2>
 220:	3e f4       	brtc	.+14     	; 0x230 <__divmodhi4_exit>

00000222 <__divmodhi4_neg1>:
 222:	90 95       	com	r25
 224:	81 95       	neg	r24
 226:	9f 4f       	sbci	r25, 0xFF	; 255
 228:	08 95       	ret

0000022a <__divmodhi4_neg2>:
 22a:	70 95       	com	r23
 22c:	61 95       	neg	r22
 22e:	7f 4f       	sbci	r23, 0xFF	; 255

00000230 <__divmodhi4_exit>:
 230:	08 95       	ret

00000232 <__udivmodhi4>:
 232:	aa 1b       	sub	r26, r26
 234:	bb 1b       	sub	r27, r27
 236:	51 e1       	ldi	r21, 0x11	; 17
 238:	07 c0       	rjmp	.+14     	; 0x248 <__udivmodhi4_ep>

0000023a <__udivmodhi4_loop>:
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	a6 17       	cp	r26, r22
 240:	b7 07       	cpc	r27, r23
 242:	10 f0       	brcs	.+4      	; 0x248 <__udivmodhi4_ep>
 244:	a6 1b       	sub	r26, r22
 246:	b7 0b       	sbc	r27, r23

00000248 <__udivmodhi4_ep>:
 248:	88 1f       	adc	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	5a 95       	dec	r21
 24e:	a9 f7       	brne	.-22     	; 0x23a <__udivmodhi4_loop>
 250:	80 95       	com	r24
 252:	90 95       	com	r25
 254:	bc 01       	movw	r22, r24
 256:	cd 01       	movw	r24, r26
 258:	08 95       	ret

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
