
GPIO_SWITCH_ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000218  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afc  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ed  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000443  00000000  00000000  00001745  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000494  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000368  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	87 d0       	rcall	.+270    	; 0x1c2 <main>
  b4:	af c0       	rjmp	.+350    	; 0x214 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <init_fnd>:
	for (i = 0; i < 16; i++) {
		fnd(ith, i);
		_delay_ms(500);
	}
	
}
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
  bc:	8f e0       	ldi	r24, 0x0F	; 15
  be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  c2:	15 ba       	out	0x15, r1	; 21
  c4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
  c8:	08 95       	ret

000000ca <fnd>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <fnd+0xa>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <fnd+0x6>
  d8:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
  dc:	60 31       	cpi	r22, 0x10	; 16
  de:	71 05       	cpc	r23, r1
  e0:	30 f4       	brcc	.+12     	; 0xee <fnd+0x24>
  e2:	fb 01       	movw	r30, r22
  e4:	ef 5f       	subi	r30, 0xFF	; 255
  e6:	fe 4f       	sbci	r31, 0xFE	; 254
  e8:	80 81       	ld	r24, Z
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <fnd+0x2a>
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9f e1       	ldi	r25, 0x1F	; 31
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <fnd+0x2e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <fnd+0x34>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <fnd_overflow>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	05 c0       	rjmp	.+10     	; 0x116 <fnd_overflow+0x14>
 10c:	6f ef       	ldi	r22, 0xFF	; 255
 10e:	7f ef       	ldi	r23, 0xFF	; 255
 110:	ce 01       	movw	r24, r28
 112:	db df       	rcall	.-74     	; 0xca <fnd>
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c4 30       	cpi	r28, 0x04	; 4
 118:	d1 05       	cpc	r29, r1
 11a:	c4 f3       	brlt	.-16     	; 0x10c <fnd_overflow+0xa>
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <fnd_number>:

void fnd_number(int number)
{
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	7c 01       	movw	r14, r24
	int abs_number, n, i;
	if (number < -999 || number > 9999)
 130:	89 51       	subi	r24, 0x19	; 25
 132:	9c 4f       	sbci	r25, 0xFC	; 252
 134:	87 3f       	cpi	r24, 0xF7	; 247
 136:	9a 42       	sbci	r25, 0x2A	; 42
 138:	10 f0       	brcs	.+4      	; 0x13e <fnd_number+0x1c>
	{
		fnd_overflow(); // 숫자 표현 범위를 넘어감
 13a:	e3 df       	rcall	.-58     	; 0x102 <fnd_overflow>
 13c:	26 c0       	rjmp	.+76     	; 0x18a <fnd_number+0x68>
	}
	else
	{
		abs_number = absolute(number);
 13e:	e7 01       	movw	r28, r14
 140:	ff 20       	and	r15, r15
 142:	24 f4       	brge	.+8      	; 0x14c <fnd_number+0x2a>
 144:	cc 27       	eor	r28, r28
 146:	dd 27       	eor	r29, r29
 148:	ce 19       	sub	r28, r14
 14a:	df 09       	sbc	r29, r15
		for(i = 0; i < 4; i++)
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	11 c0       	rjmp	.+34     	; 0x174 <fnd_number+0x52>
		{
			n = abs_number % 10; // 10으로 나눈 나머지 수
 152:	ce 01       	movw	r24, r28
 154:	6a e0       	ldi	r22, 0x0A	; 10
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	36 d0       	rcall	.+108    	; 0x1c6 <__divmodhi4>
			fnd(i, n);
 15a:	bc 01       	movw	r22, r24
 15c:	c8 01       	movw	r24, r16
 15e:	b5 df       	rcall	.-150    	; 0xca <fnd>
			if (abs_number >= 10) abs_number /= 10; // 10으로 나누어 다음 자리 수로 이동
 160:	ca 30       	cpi	r28, 0x0A	; 10
 162:	d1 05       	cpc	r29, r1
 164:	54 f0       	brlt	.+20     	; 0x17a <fnd_number+0x58>
 166:	ce 01       	movw	r24, r28
 168:	6a e0       	ldi	r22, 0x0A	; 10
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	2c d0       	rcall	.+88     	; 0x1c6 <__divmodhi4>
 16e:	eb 01       	movw	r28, r22
		fnd_overflow(); // 숫자 표현 범위를 넘어감
	}
	else
	{
		abs_number = absolute(number);
		for(i = 0; i < 4; i++)
 170:	0f 5f       	subi	r16, 0xFF	; 255
 172:	1f 4f       	sbci	r17, 0xFF	; 255
 174:	04 30       	cpi	r16, 0x04	; 4
 176:	11 05       	cpc	r17, r1
 178:	64 f3       	brlt	.-40     	; 0x152 <fnd_number+0x30>
			n = abs_number % 10; // 10으로 나눈 나머지 수
			fnd(i, n);
			if (abs_number >= 10) abs_number /= 10; // 10으로 나누어 다음 자리 수로 이동
			else break;
		}
		if (number < 0) fnd(i + 1,fnd_minus); // 음수 부호
 17a:	ff 20       	and	r15, r15
 17c:	34 f4       	brge	.+12     	; 0x18a <fnd_number+0x68>
 17e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	c8 01       	movw	r24, r16
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	a0 df       	rcall	.-192    	; 0xca <fnd>
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	08 95       	ret

00000198 <test_number>:

void test_number(void)
{
	int n = -1000, i;
 198:	08 e1       	ldi	r16, 0x18	; 24
 19a:	1c ef       	ldi	r17, 0xFC	; 252
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <test_number+0xa>
	while(1)
	{
		for(i=0; i<10; i++)
		fnd_number(n);
		n++;
		if (n > 11000) n = -1000;
 19e:	08 e1       	ldi	r16, 0x18	; 24
 1a0:	1c ef       	ldi	r17, 0xFC	; 252
void test_number(void)
{
	int n = -1000, i;
	while(1)
	{
		for(i=0; i<10; i++)
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <test_number+0x16>
		fnd_number(n);
 1a8:	c8 01       	movw	r24, r16
 1aa:	bb df       	rcall	.-138    	; 0x122 <fnd_number>
void test_number(void)
{
	int n = -1000, i;
	while(1)
	{
		for(i=0; i<10; i++)
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	ca 30       	cpi	r28, 0x0A	; 10
 1b0:	d1 05       	cpc	r29, r1
 1b2:	d4 f3       	brlt	.-12     	; 0x1a8 <test_number+0x10>
		fnd_number(n);
		n++;
 1b4:	0f 5f       	subi	r16, 0xFF	; 255
 1b6:	1f 4f       	sbci	r17, 0xFF	; 255
		if (n > 11000) n = -1000;
 1b8:	09 3f       	cpi	r16, 0xF9	; 249
 1ba:	8a e2       	ldi	r24, 0x2A	; 42
 1bc:	18 07       	cpc	r17, r24
 1be:	7c f7       	brge	.-34     	; 0x19e <test_number+0x6>
 1c0:	f0 cf       	rjmp	.-32     	; 0x1a2 <test_number+0xa>

000001c2 <main>:
	}
}

int main(void)
{
	init_fnd();
 1c2:	7a df       	rcall	.-268    	; 0xb8 <init_fnd>
	test_number();
 1c4:	e9 df       	rcall	.-46     	; 0x198 <test_number>

000001c6 <__divmodhi4>:
 1c6:	97 fb       	bst	r25, 7
 1c8:	07 2e       	mov	r0, r23
 1ca:	16 f4       	brtc	.+4      	; 0x1d0 <__divmodhi4+0xa>
 1cc:	00 94       	com	r0
 1ce:	06 d0       	rcall	.+12     	; 0x1dc <__divmodhi4_neg1>
 1d0:	77 fd       	sbrc	r23, 7
 1d2:	08 d0       	rcall	.+16     	; 0x1e4 <__divmodhi4_neg2>
 1d4:	0b d0       	rcall	.+22     	; 0x1ec <__udivmodhi4>
 1d6:	07 fc       	sbrc	r0, 7
 1d8:	05 d0       	rcall	.+10     	; 0x1e4 <__divmodhi4_neg2>
 1da:	3e f4       	brtc	.+14     	; 0x1ea <__divmodhi4_exit>

000001dc <__divmodhi4_neg1>:
 1dc:	90 95       	com	r25
 1de:	81 95       	neg	r24
 1e0:	9f 4f       	sbci	r25, 0xFF	; 255
 1e2:	08 95       	ret

000001e4 <__divmodhi4_neg2>:
 1e4:	70 95       	com	r23
 1e6:	61 95       	neg	r22
 1e8:	7f 4f       	sbci	r23, 0xFF	; 255

000001ea <__divmodhi4_exit>:
 1ea:	08 95       	ret

000001ec <__udivmodhi4>:
 1ec:	aa 1b       	sub	r26, r26
 1ee:	bb 1b       	sub	r27, r27
 1f0:	51 e1       	ldi	r21, 0x11	; 17
 1f2:	07 c0       	rjmp	.+14     	; 0x202 <__udivmodhi4_ep>

000001f4 <__udivmodhi4_loop>:
 1f4:	aa 1f       	adc	r26, r26
 1f6:	bb 1f       	adc	r27, r27
 1f8:	a6 17       	cp	r26, r22
 1fa:	b7 07       	cpc	r27, r23
 1fc:	10 f0       	brcs	.+4      	; 0x202 <__udivmodhi4_ep>
 1fe:	a6 1b       	sub	r26, r22
 200:	b7 0b       	sbc	r27, r23

00000202 <__udivmodhi4_ep>:
 202:	88 1f       	adc	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	5a 95       	dec	r21
 208:	a9 f7       	brne	.-22     	; 0x1f4 <__udivmodhi4_loop>
 20a:	80 95       	com	r24
 20c:	90 95       	com	r25
 20e:	bc 01       	movw	r22, r24
 210:	cd 01       	movw	r24, r26
 212:	08 95       	ret

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
