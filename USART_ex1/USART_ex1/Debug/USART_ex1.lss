
USART_ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d6  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082a  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	22 d0       	rcall	.+68     	; 0xde <main>
  9a:	44 c0       	rjmp	.+136    	; 0x124 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <init_uart0>:
#include <util/delay.h>

void init_uart0(unsigned int baud) // baud rate - 8 data bits - No Parity - 1 stop bit
{
	unsigned int ubrr;
	ubrr = (unsigned int)(F_CPU/16/baud - 1); // Ref. Manual p. 173
  9e:	9c 01       	movw	r18, r24
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	60 e4       	ldi	r22, 0x40	; 64
  a6:	72 e4       	ldi	r23, 0x42	; 66
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	19 d0       	rcall	.+50     	; 0xe0 <__udivmodsi4>
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
  b2:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
  b6:	29 b9       	out	0x09, r18	; 9
	UCSR0B = (1<<RXEN) | (1<<TXEN); // 0b00011000; // usart0 Tx, Rx 활성화
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	8a b9       	out	0x0a, r24	; 10
  bc:	08 95       	ret

000000be <Tx0>:
}

void Tx0(unsigned char c)
{
	while((UCSR0A & 0x20) == 0); // 송신 가능할 때까지 기다림
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <Tx0>
	UDR0 = c;
  c2:	8c b9       	out	0x0c, r24	; 12
	while((UCSR0A & 0x40) == 0); // 송신 완료까지 기다림.
  c4:	5e 9b       	sbis	0x0b, 6	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <Tx0+0x6>
}
  c8:	08 95       	ret

000000ca <Rx0>:

unsigned char Rx0(void)
{
	while((UCSR0A & 0x80) == 0); // 수신될 때까지 기다림
  ca:	5f 9b       	sbis	0x0b, 7	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <Rx0>
	return(UDR0);
  ce:	8c b1       	in	r24, 0x0c	; 12
}
  d0:	08 95       	ret

000000d2 <uart0_echo>:

void uart0_echo(void)
{
	init_uart0(9600); // uart0, 9600-8-N-1
  d2:	80 e8       	ldi	r24, 0x80	; 128
  d4:	95 e2       	ldi	r25, 0x25	; 37
  d6:	e3 df       	rcall	.-58     	; 0x9e <init_uart0>
	while(1)
	{
		Tx0(Rx0());
  d8:	f8 df       	rcall	.-16     	; 0xca <Rx0>
  da:	f1 df       	rcall	.-30     	; 0xbe <Tx0>
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <uart0_echo+0x6>

000000de <main>:
  de:	f9 df       	rcall	.-14     	; 0xd2 <uart0_echo>

000000e0 <__udivmodsi4>:
  e0:	a1 e2       	ldi	r26, 0x21	; 33
  e2:	1a 2e       	mov	r1, r26
  e4:	aa 1b       	sub	r26, r26
  e6:	bb 1b       	sub	r27, r27
  e8:	fd 01       	movw	r30, r26
  ea:	0d c0       	rjmp	.+26     	; 0x106 <__udivmodsi4_ep>

000000ec <__udivmodsi4_loop>:
  ec:	aa 1f       	adc	r26, r26
  ee:	bb 1f       	adc	r27, r27
  f0:	ee 1f       	adc	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	a2 17       	cp	r26, r18
  f6:	b3 07       	cpc	r27, r19
  f8:	e4 07       	cpc	r30, r20
  fa:	f5 07       	cpc	r31, r21
  fc:	20 f0       	brcs	.+8      	; 0x106 <__udivmodsi4_ep>
  fe:	a2 1b       	sub	r26, r18
 100:	b3 0b       	sbc	r27, r19
 102:	e4 0b       	sbc	r30, r20
 104:	f5 0b       	sbc	r31, r21

00000106 <__udivmodsi4_ep>:
 106:	66 1f       	adc	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	88 1f       	adc	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	1a 94       	dec	r1
 110:	69 f7       	brne	.-38     	; 0xec <__udivmodsi4_loop>
 112:	60 95       	com	r22
 114:	70 95       	com	r23
 116:	80 95       	com	r24
 118:	90 95       	com	r25
 11a:	9b 01       	movw	r18, r22
 11c:	ac 01       	movw	r20, r24
 11e:	bd 01       	movw	r22, r26
 120:	cf 01       	movw	r24, r30
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
